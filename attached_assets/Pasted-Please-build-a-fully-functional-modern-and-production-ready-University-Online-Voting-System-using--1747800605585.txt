Please build a fully functional, modern, and production-ready University Online Voting System using Next.js, Tailwind CSS, Firebase, and optionally a custom Node.js backend (if needed for extended API control).

Every feature listed below must be working, tested, and ready for deployment, with no broken components, placeholders, or partial functionality.

🧱 Stack Requirements
Frontend & Routing: Next.js (React-based full-stack framework)

Styling: Tailwind CSS

Real-time & Auth: Firebase

State Management: Context API or Redux

Optional Backend: Node.js or Next.js API routes

🔐 User Authentication
Students only can register and vote.

Registration must validate emails ending with:
@paterostechnologicalcollege.edu.ph

Admins are created manually (seed data or backend).

Use Firebase Authentication or secure session/token (e.g., NextAuth, JWT).

🧑‍🎓 Student Dashboard
View all active elections.

Cast only one vote per election.

Show a confirmation screen/message after voting.

🛠️ Admin Dashboard
Manage elections (create, edit, delete).

Manage candidates (create, edit, delete).

Set voting periods (start and end time).

View live results (displayed via table or bar chart).

📡 Real-Time Voter Feed
Show updates live when students vote.

Format like a chat log:

Voter name

Timestamp

Election title

Use Firebase Realtime Database for instant updates.

👤 Candidate Profiles
Each candidate should have:

Full name

Department

Manifesto

Optional photo

🔒 Security & Validation
Enforce one vote per student per election.

Prevent any form of duplicate voting.

Encrypt/store votes securely and log timestamps.

🎨 UI/UX Guidelines
Clean, professional interface using Tailwind CSS.

Fully responsive on mobile, tablet, and desktop.

Use Next.js routing (app router or pages router).

Global state handling using Context API or Redux Toolkit.

🚀 Firebase Integration
Use the following Firebase configuration:

js
Copy
Edit
// Import the functions you need from the SDKs you need
import { initializeApp } from "firebase/app";

// Your web app's Firebase configuration
const firebaseConfig = {
  apiKey: "AIzaSyCtIXaTAtMWSuhttXb_B3_pjo2ikiQUMYs",
  authDomain: "appdev-project-cfb61.firebaseapp.com",
  projectId: "appdev-project-cfb61",
  storageBucket: "appdev-project-cfb61.firebasestorage.app",
  messagingSenderId: "119314580599",
  appId: "1:119314580599:web:2dad78338d1968d1cd7272"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
Realtime Database URL:
https://appdev-project-cfb61-default-rtdb.firebaseio.com/

Use Firebase for:

Authentication

Realtime voting feed

Optional: Firestore/Realtime DB for votes, candidates, and elections

✅ Final Note
This project must be complete, fully functional, and ready to deploy.
Every page, function, authentication flow, vote logic, and Firebase integration must be working correctly—no bugs, placeholders, or missing features.